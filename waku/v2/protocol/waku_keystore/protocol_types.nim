when (NimMajor, NimMinor) < (1, 4):
  {.push raises: [Defect].}
else:
  {.push raises: [].}

import 
  stew/results

type
  IdentityTrapdoor* = seq[byte] #array[32, byte]
  IdentityNullifier* = seq[byte] #array[32, byte]
  # identity key as defined in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  IdentitySecretHash* = seq[byte] #array[32, byte]
  # hash of identity key as defined ed in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  IDCommitment* = seq[byte] #array[32, byte]

type IdentityCredential* = object
  idTrapdoor*: IdentityTrapdoor
  idNullifier*: IdentityNullifier
  ## user's identity key (a secret key) which is selected randomly
  ## see details in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  idSecretHash*: IdentitySecretHash
  # hash of user's identity key generated by
  # Poseidon hash function implemented in rln lib
  # more details in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  idCommitment*: IDCommitment

type MembershipIndex* = uint

type MembershipContract* = object
  chainId*: string
  address*: string

type MembershipGroup* = object
  membershipContract*: MembershipContract
  treeIndex*: MembershipIndex

type MembershipCredentials* = object
   identityCredential*: IdentityCredential
   membershipGroups*: seq[MembershipGroup]

type AppInfo* = object
  application*: string
  appIdentifier*: string
  version*: string

type AppKeystore* = object
  application*: string
  appIdentifier*: string
  credentials*: seq[MembershipCredentials]
  version*: string

type
  AppKeystoreError* = enum
    KeystoreOsError               = "keystore error: OS specific error"
    KeystoreIoError               = "keystore error: IO specific error"
    KeystoreJsonKeyError          = "keystore error: fields not present in JSON"
    KeystoreJsonError             = "keystore error: JSON encoder/decoder error"
    KeystoreKeystoreDoesNotExist  = "keystore error: file does not exist"
    KeystoreCreateKeystoreError   = "Error while creating application keystore"
    KeystoreLoadKeystoreError     = "Error while loading application keystore"
    KeystoreCreateKeyfileError    = "Error while creating keyfile for credentials"
    KeystoreSaveKeyfileError      = "Error while saving keyfile for credentials"
    KeystoreReadKeyfileError      = "Error while reading keyfile for credentials"

type KeystoreResult*[T] = Result[T, AppKeystoreError]