name: ci / build-windows

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}  

    env:
      MSYSTEM: MINGW64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-toolchain
          make
          cmake
          upx
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-postgresql
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-libwinpthread-git
          mingw-w64-x86_64-zlib
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-python
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-llvm
          mingw-w64-x86_64-clang
      
    - name: Add UPX to PATH
      run: |
        echo "/usr/bin:$PATH" >> $GITHUB_PATH
        echo "/mingw64/bin:$PATH" >> $GITHUB_PATH
        echo "/usr/lib:$PATH" >> $GITHUB_PATH
        echo "/mingw64/lib:$PATH" >> $GITHUB_PATH 

    - name: Verify dependencies
      run: |
        which upx gcc g++ make cmake cargo rustc python

    - name: Updating submodules
      run: git submodule update --init --recursive

    - name: Creating tmp directory
      run: mkdir -p tmp

    - name: Building Nim
      run: |
        cd vendor/nimbus-build-system/vendor/Nim
        ./build_all.bat
        cd ../../../..

    - name: Building libunwind
      continue-on-error: true
      run: |
        cd vendor/nim-libbacktrace
        
        # Add additional CMake flags for Windows
        export CMAKE_ARGS="$CMAKE_ARGS \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_BUILD_TYPE=Release"
        
        # Build with verbose output
        make install/usr/lib/libunwind.a V=3
        
        # Search for the built library in multiple locations
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo "Searching for libunwind.a..."
        find . -name "libunwind.a" -print
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        
        # Try to copy from different possible locations
        if [ -f ./vendor/libunwind/build/lib/libunwind.a ]; then
          echo "Found libunwind.a in build/lib"
          cp ./vendor/libunwind/build/lib/libunwind.a install/usr/lib
        elif [ -f ./vendor/libunwind/build/libunwind.a ]; then
          echo "Found libunwind.a in build directory"
          cp ./vendor/libunwind/build/libunwind.a install/usr/lib
        elif [ -f ./vendor/libunwind/build/runtimes/libunwind/lib/libunwind.a ]; then
          echo "Found libunwind.a in runtimes directory"
          cp ./vendor/libunwind/build/runtimes/libunwind/lib/libunwind.a install/usr/lib
        else
          echo "libunwind.a not found in any expected location"
          exit 1
        fi
        
        cd ../../

    # - name: Building libunwind
    #   continue-on-error: true
    #   run: |
    #     cd vendor/nim-libbacktrace
    #     make install/usr/lib/libunwind.a V=2
    #     echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    #     find . -name "*.a"
    #     echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    #     if [ -f ./vendor/libunwind/build/lib/libunwind.a ]; then
    #       cp ./vendor/libunwind/build/lib/libunwind.a install/usr/lib
    #     else
    #       echo "libunwind.a not found, skipping copy"
    #     fi
    #     cd ../../

    - name: Building miniupnpc
      run: |
        cd vendor/nim-nat-traversal/vendor/miniupnp/miniupnpc
        git checkout little_chore_windows_support
        make -f Makefile.mingw CC=gcc CXX=g++ libminiupnpc.a V=1
        cd ../../../../..

    - name: Building libnatpmp
      run: |
        cd ./vendor/nim-nat-traversal/vendor/libnatpmp-upstream
        make CC="gcc -fPIC -D_WIN32_WINNT=0x0600 -DNATPMP_STATICLIB" libnatpmp.a V=1
        cd ../../../../

    - name: Building wakunode2
      run: |
        make wakunode2 LOG_LEVEL=DEBUG V=3 -j8
    
    - name: Check Executable
      run: |
        if [ -f "./build/wakunode2.exe" ]; then
          echo "wakunode2.exe build successful"
        else
          echo "Build failed: wakunode2.exe not found"
          exit 1
        fi
