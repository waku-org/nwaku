pipeline {
  agent { label 'linux' }

  options {
    timestamps()
    timeout(time: 20, unit: 'MINUTES')
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
    ))
  }

  parameters {
    string(
      name: 'MAKE_TARGET',
      description: 'Makefile target to build. Optional Parameter.',
      defaultValue: params.MAKE_TARGET ?: 'wakunode2',
    )
    string(
      name: 'IMAGE_TAG',
      description: 'Name of Docker tag to push. Optional Parameter.',
      defaultValue: getDefaultImageTag()
    )
    string(
      name: 'IMAGE_NAME',
      description: 'Name of Docker image to push.',
      defaultValue: params.IMAGE_NAME ?: 'wakuorg/nwaku',
    )
    string(
      name: 'DOCKER_CRED',
      description: 'Name of Docker Hub credential.',
      defaultValue: params.DOCKER_CRED ?: 'dockerhub-vacorgbot-api-token',
    )
    string(
      name: 'NIMFLAGS',
      description: 'Flags for Nim compilation.',
      defaultValue: params.NIMFLAGS ?: [
        '--colors:off',
        '-d:disableMarchNative',
        '-d:chronicles_colors:none',
        '-d:insecure',
        '-d:postgres',
      ].join(' ')
    )
    choice(
      name: "LOWEST_LOG_LEVEL_ALLOWED",
      choices: ['TRACE', 'DEGUG', 'INFO', 'NOTICE', 'WARN', 'ERROR', 'FATAL'],
      description: "Defines the log level, which will be available at runtime (Chronicles log level)",
    )
    booleanParam(
      name: 'DEBUG',
      description: 'Enable debug features (heaptrack).',
      defaultValue: false
    )
  }

  stages {
    stage('Build') {
      steps { script {
        image = docker.build(
          "${params.IMAGE_NAME}:${params.IMAGE_TAG ?: env.GIT_COMMIT.take(8)}",
          "--label=commit='${env.GIT_COMMIT.take(8)}' " +
          "--build-arg=MAKE_TARGET='${params.MAKE_TARGET}' " +
          "--build-arg=NIMFLAGS='${params.NIMFLAGS}' " +
          "--build-arg=LOG_LEVEL='${params.LOWEST_LOG_LEVEL_ALLOWED}' "  +
          "--target=${params.DEBUG ? "debug" : "prod"} ."
        )
      } }
    }

    stage('Check') {
      steps { script {
        image.inside('--entrypoint=""') { c ->
          sh '/usr/bin/wakunode --version'
        }
      } }
    }

    stage('Push') {
      when { expression { params.IMAGE_TAG != '' } }
      steps { script {
        withDockerRegistry([
          credentialsId: params.DOCKER_CRED, url: ""
        ]) {
          image.push()
          /* If Git ref is a tag push it as Docker tag too. */
          if (params.GIT_REF ==~ /v\d+\.\d+\.\d+.*/) {
            image.push(params.GIT_REF)
          }
        }
      } }
    }
  } // stages

  post {
    success { script {
      def discord = load "${WORKSPACE}/ci/discord.groovy"
      discord.send(
        header: 'Nim-Waku deployment successful!',
        cred: 'discord-waku-deployments-webhook',
      )
    } }
    always { sh 'docker image prune -f' }
  } // post
} // pipeline

def getDefaultImageTag() {
  switch (env.JOB_BASE_NAME) {
    case 'docker-latest':      return 'latest'
    case 'docker-release':     return 'stable'
    default:                   return env.JOB_BASE_NAME
  }
}
